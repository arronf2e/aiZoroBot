const fs = require('fs');
const { ethers } = require('ethers');
const path = require('path');
const dotenv = require('dotenv');
const cron = require('node-cron');
const { mainLoop } = require('./main.js');

dotenv.config();

// ÂºÇÊ≠•Âä†ËΩΩ chalk
let chalk;
import('chalk').then(module => {
    chalk = module.default;
}).catch(err => {
    console.error('Failed to import chalk:', err);
    process.exit(1);
});

if (!process.env.REFERRAL_CODE) {
    console.error('‚ùå ËØ∑Âú® .env Êñá‰ª∂‰∏≠ËÆæÁΩÆ REFERRAL_CODE');
    process.exit(1);
}

const WALLET_FILE = path.join(__dirname, 'wallet.csv');


function generateWallets(count = 1) {
    const wallets = [];

    for (let i = 0; i < count; i++) {
        const wallet = ethers.Wallet.createRandom();
        wallets.push({
            mnemonic: wallet.mnemonic.phrase,
            privateKey: wallet.privateKey,
            address: wallet.address
        });
    }

    return wallets;
}

function saveWallets(wallets, randomReferralCode) {
    try {
        let existingData = [];
        if (fs.existsSync(WALLET_FILE)) {
            const rawData = fs.readFileSync(WALLET_FILE, 'utf8');
            const lines = rawData.split('\n'); // Ë∑≥ËøáË°®Â§¥
            existingData = lines.map(line => {
                const [address, privateKey, mnemonic, referral_code] = line.split(',');
                return { address, privateKey, mnemonic, referral_code };
            });
        }

        // ÂêàÂπ∂Êñ∞ÊóßÊï∞ÊçÆ
        const combinedData = [...existingData, ...wallets];

        if(wallets.length < 1){
            return;
        }
        // ÂÜôÂÖ•ÂêàÂπ∂ÂêéÁöÑÊï∞ÊçÆ
        const csvData = combinedData.map(w => `${w.address},${w.privateKey},${w.mnemonic},${randomReferralCode}`).join('\n');
        fs.writeFileSync(WALLET_FILE, `${csvData}`);
        console.log(`‚úÖ ÊàêÂäüÊñ∞Â¢û ${wallets.length} ‰∏™Èí±ÂåÖÔºåÂΩìÂâçÊÄªËÆ°ÈÇÄËØ∑ ${combinedData.length} ‰∏™Èí±ÂåÖ`);
    } catch (error) {
        console.error('‚ùå Êñá‰ª∂‰øùÂ≠òÂ§±Ë¥•:', error.message);
        process.exit(1);
    }
}

async function main() {
    // ‰ªé REFERRAL_CODE ‰∏≠ÈöèÊú∫Ëé∑Âèñ‰∏Ä‰∏™ÈÇÄËØ∑Á†Å
    const referralCodes = JSON.parse(process.env.REFERRAL_CODE);
    for (const referralCode of referralCodes) {
        console.log(`üéÅ Êú¨Ê¨°‰ΩøÁî®ÁöÑÈÇÄËØ∑Á†Å: ${referralCode}`);

        const walletCount = process.env.INVITE_COUNT;
        const wallets = generateWallets(parseInt(walletCount));

        const saveWallet = [];

        for (const wallet of wallets) {
            console.log('------------------------------');
            console.log(`üîë Èí±ÂåÖÂú∞ÂùÄ: ${wallet.address} ÂºÄÂßãÊ≥®ÂÜå`);
            await mainLoop(wallet.privateKey, null, referralCode);
            console.log('------------------------------');
            saveWallet.push(wallet);
        }
        saveWallets(saveWallet, referralCode);
    }
    console.log('üõ°Ô∏è ËØ∑Â¶•ÂñÑ‰øùÁÆ°ÁîüÊàêÁöÑÂä©ËÆ∞ËØçÂíåÁßÅÈí•ÔºÅ');
}

function startApp() {
    if (!chalk) return;

    if (require.main === module) {
        // ÊØèÂ∞èÊó∂ÊâßË°å‰∏ÄÊ¨°ÔºàÂú®Êï¥ÁÇπÊâßË°åÔºâ
        cron.schedule('0 * * * *', () => {
            console.log(chalk.cyan(`\nüïí ${new Date().toLocaleString()} ÂºÄÂßãÊâßË°åÈÇÄËØ∑‰ªªÂä°`));
            main();
        }, {
            timezone: "Asia/Shanghai"
        });

        // Á´ãÂç≥ÊâßË°å‰∏ÄÊ¨°
        console.log(chalk.cyan(`\nüïí ${new Date().toLocaleString()} Á´ãÂç≥ÊâßË°åÈÇÄËØ∑‰ªªÂä°`));
        main();
    }
}

// Âú® chalk Âä†ËΩΩÂÆåÊàêÂêéÂêØÂä®Â∫îÁî®
if (require.main === module) {
    const checkChalk = setInterval(() => {
        if (chalk) {
            clearInterval(checkChalk);
            startApp();
        }
    }, 100);
}

module.exports = {
    generateWallets,
    saveWallets,
    main
};
